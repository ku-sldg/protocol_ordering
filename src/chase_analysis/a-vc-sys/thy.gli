
%%%%%%%%%%%%%%%%%%%%%%%%%
% Minimality Conditions %
%%%%%%%%%%%%%%%%%%%%%%%%%

%Record measurement events
l(V) = msp(P2, M, P1, T, X) => ms_evt(V).

%Any two alternating adversary events for the same component must have
%a measurement event in between. (This disallows models with pointless
%chains of cor-rep events.)
l(V1) = cor(P, C) & l(V2) = rep(P, C) & prec(V1, V2)
 => prec(V1, V3) & prec(V3, V2) & ms_evt(V3) & relevant(P, C, V3).
l(V1) = rep(P, C) & l(V2) = cor(P, C) & prec(V1, V2)
 => prec(V1, V3) & prec(V3, V2) & ms_evt(V3) & relevant(P, C, V3).

%Two adversary events of the same type for the same component
%must have an intervening adversary event of the opposite type
%for that component.
l(V1) = cor(P,C) & l(V2) = cor(P,C) & prec(V1, V2)
 => prec(V1, V3) & prec(V3, V2) & l(V3) = rep(P,C).
l(V1) = rep(P,C) & l(V2) = rep(P,C) & prec(V1, V2)
 => prec(V1, V3) & prec(V3, V2) & l(V3) = cor(P,C).

l(V) = msp(P2, M, P1, T, X) & relevant(P, C, V)
 => P = P1 & C = T | P = P2 & C = M | P = P2 & depends(P2, C, P2, M).

%%%%%%%%%%%%%%%%%%%%%%%%
% Events are injective %
%%%%%%%%%%%%%%%%%%%%%%%%

cor(P1, C1) = cor(P2, C2) => P1 = P2 & C1 = C2.
rep(P1, C1) = rep(P2, C2) => P1 = P2 & C1 = C2.
cor(P1, C1) = rep(P2, C2) => false.
cor(P1, C1) = msp(P2, M, Q, T, X) => false.
rep(P1, C1) = msp(P2, M, Q, T, X) => false.
msp(P1, M1, Q1, T1, X1) = msp(P2, M2, Q2, T2, X2)
  => P1 = P2 & M1 = M2 & Q1 = Q2 & T1 = T2 & X1 = X2.


%%%%%%%%%%%%%%%%%%%%%%%%%
% Strict partial orders %
%%%%%%%%%%%%%%%%%%%%%%%%%

% Irreflexivity:
prec(V, V) => false.
depends(P, C, P, C) => false.

% Transitivity:
prec(V1, V2) & prec(V2, V3) => prec(V1, V3).
depends(P1, C1, P2, C2) & depends(P2, C2, P3, C3) => depends(P1, C1, P3, C3).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Adversary Ordered Event Systems %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Introduction of relevant:
l(V) = msp(P2, M, P1, T, X) & depends(P2, C, P2, M)
	=> relevant(P2, M, V) & relevant(P1, T, V)
	   & relevant(P2, C, V).
l(V) = msp(P2, M, P1, T, X)
	=> relevant(P2, M, V) & relevant(P1, T, V).
l(V) = cor(P, C) => relevant(P, C, V).
l(V) = rep(P, C) => relevant(P, C, V).

% Adversary ordered:
relevant(P, C, V1) & relevant(P, C, V2) & l(V1) = cor(P, C)
  => prec(V1, V2) | prec(V2, V1) | V1 = V2.
relevant(P, C, V1) & relevant(P, C, V2) & l(V1) = rep(P, C)
  => prec(V1, V2) | prec(V2, V1) | V1 = V2.

%%%%%%%%%%%%%%%%%%%%%
% Saturated Queries %
%%%%%%%%%%%%%%%%%%%%%

% Rule 1
l(V) = msp(P2, M, P1, T, X) & corrupt_at(P1, T, V)
  => corrupt_at(P2, M, V) | depends(P2, C, P2, M) & corrupt_at(P2, C, V).

% Rule 2
corrupt_at(P, C, V1)
 => prec(V0, V1) & l(V0) = cor(P, C).

% Rule 3
prec(V1, V2) & corrupt_at(P, C, V2) & l(V1) = rep(P, C)
  => prec(V1, V3) & prec(V3, V2) & l(V3) = cor(P, C).

% Rule 4
l(V1) = cor(P2, C) & ms_evt(V2) & prec(V1, V2) & relevant(P2, C, V2)
  => corrupt_at(P2, C, V2)
   | prec(V1, V3) & prec(V3, V2) & l(V3) = rep(P2, C).
